#+TITLE: Introducción a Ratpack
#+AUTHOR: Miguel

* Outline

** Introducción
** ¿Qué es Ratpack?

   - Toolkit para crear aplicaciones web
   - Basado en Netty
     - Non-blocking I/O framework
     - Async IO
   - Toolkit != framework, no toma decisiones por ti
   - Optimizado para groovy y Java8
   - Fácil y agradable de usar
   - No es una aplicación con Java Servlets
   - No se despliega en un servidor de aplicaciones Java; son
     aplicaciones autocontenidas
   - Aplicación standard corre en ~30Mb de memoria
   - Intenta hacer sencillo desarrollar aplicaciones simples, y no
     ser obstrusivo cuando éstas se compliquen

** ¿Cuándo usar Ratpack?

   - No-framework
   - Prototipado
   - Scripting
   - Microservicios

** Scripting con Ratpack
*** Grab
*** Run
*** Primer handler
*** Profit :D
** Groovy Ratpack DSL
*** Handlers
**** Método HTTP
**** Basic render
**** URL params

     #+BEGIN_SRC groovy
       get("update/:id") {
           def id = pathTokens.asLong('id')
       }
     #+END_SRC

**** GET, POST, PUT, DEL params
**** Forms
**** Uploading file?
**** Json rendering (as example?)
**** Builders
**** Groovy Templates

     #+BEGIN_SRC groovy
       get {
           render groovyTemplate("index.html", ['myModel': 'as a map'])
       }
     #+END_SRC

*** Assets
** Creciendo con Ratpack
*** Gradle con Lazybones
**** Configuración (dentro de gradle o fuera?)
*** Testing

    - No está ligado a ningún framework
    - Se recomienda usar Spock
    - El plugin de gradle =ratpack-groovy= se encarga de prepararnos
      el proyecto para testing

*** Inyección de dependencias
*** Modulos
** Handler y Context
** API java
** Deploy

   - Tarea de gradle, =./gradlew distZip=
   - Obtenemos un .zip
   - Descomprimimos y ejecutamos el script de shell de la carpeta
     =bin=
   - Solo necesitamos tener Java instalado y permisos para ejecutar
     scripts de shell

** Por qué aun no es 1.0

   - Soporte para WebSockets
   - Integración con =Reactor= o =RXJava= (asynchronous composition
     using a reactive pattern)

* Ideas

  - API influenced by netty
  - ByMethod

    #+BEGIN_SRC groovy
      handler("create") {
          // some common code (TEST FIRST!)
          def id = 35
          byMethod {
              get {
                  // do stuff
              }
              post {
                  // do stuff
              }
          }
      }
    #+END_SRC

  - Parse system

    #+BEGIN_SRC groovy
      import static ratpack.form.Forms.form
      
      def form = parse form()
    #+END_SRC

  - Client error

    #+BEGIN_SRC groovy
      get {
          clientError(404)
      }
    #+END_SRC

  - Redirect

    #+BEGIN_SRC groovy
      get {
          redirect '/newIndex'
      }
    #+END_SRC

  - Prefix to sepparate stuff

    #+BEGIN_SRC groovy
      prefix('api') {
          // some json handlers
      }
    #+END_SRC

  - Jackson for doing JSON

    #+BEGIN_SRC groovy
      import ratpack.jackson.JacksonModule
      import static ratpack.jackson.Jackson.json
      import static ratpack.jackson.Jackson.jsonNode
      
      get {
          render json(stuff)
      }
      
      post {
          def myInstance = parse jsonNode()
      }
    #+END_SRC

  - Request method

    #+BEGIN_SRC groovy
      if (request.method.post) { println "it's a post!" }
    #+END_SRC

  - Blocking IO

    #+BEGIN_SRC groovy
      background {
          Book.get(35)
      } then { Book book ->
          render book
      }
    #+END_SRC

* Handlers

  - Function that acts on handling a context

    #+BEGIN_SRC groovy
      import ratpack.handling.Handler;
      import ratpack.handling.Context;
      
      public class HelloWorld implements Handler {
        public void handle(Context context) {
            context.getResponse().send("Hello world!");
        }
      }
    #+END_SRC

  - =HandlerFactory= creates the first handler, effectively the
    application
  - Handler != endpoint
  - Delegate to other handlers
  - A handler can be whatever you want:
    - Middleware (like "filter" in grails)
    - Routing point
  - You can build a pipeline composing handlers
  - The elevation of Ratpack being

* Context

  - Core
  - Access Request&Response
  - Delegation&Flow control
